package com.example.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import com.example.dao.GenericDAO;
import com.example.mapper.RowMapper;

public class AbstractDAO<T> implements GenericDAO<T> {
	
	ResourceBundle bundle = ResourceBundle.getBundle("db");

	public Connection getConnection() {
		try {
			Class.forName(bundle.getString("driverName"));
			String url = bundle.getString("url");
			String username = bundle.getString("username");
			String password = bundle.getString("password");
			
			return DriverManager.getConnection(url, username, password);
			
		} catch (ClassNotFoundException | SQLException e) {
			System.out.println(e.getMessage());
		}
		return null;
	}

	@Override
	public List<T> query(String sql, RowMapper<T> rowMapper, Object... parameters) {
		
		List<T> list = new ArrayList<T>();
		
		Connection connection = getConnection();
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		
		if(connection != null) {
			
			try {
				
				statement = connection.prepareStatement(sql);
				setStatement(statement, parameters);
				resultSet = statement.executeQuery();
				
				while(resultSet.next()) {
					list.add(rowMapper.mapRow(resultSet));
				}

				return list;
				
			} catch (SQLException e) {
				return null;
				
			} finally {
				
				try {
					
					if(resultSet != null) resultSet.close();
					if(statement != null) statement.close();
					if(connection != null) connection.close();
					
				} catch (SQLException e) {
					return null;
				}
				
			}
			
		}
		
		return null;
	}


	@Override
	public void update(String sql, Object... parameters) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		try {
			connection = getConnection();
			connection.setAutoCommit(false);
			
			statement = connection.prepareStatement(sql);
			setStatement(statement, parameters);
			statement.executeUpdate();
			
			connection.commit();

		} catch (SQLException e) {
			if(connection != null)
				try {
					connection.rollback();
				} catch (SQLException e1) {
					System.out.println(e1.getMessage());
				}

		} finally {
			try {
				if(resultSet != null) resultSet.close();
				if(statement != null) statement.close();
				if(connection != null) connection.close();
				
			} catch (SQLException e) {
				System.out.print(e.getMessage());;
			}
		}
		
	}

	@Override
	public Long insert(String sql, Object... parameters) {
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		
		Long id = null;
		
		try {
			
			connection = getConnection();
			connection.setAutoCommit(false);
			
			statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			setStatement(statement, parameters);
			statement.executeUpdate();
			
			resultSet = statement.getGeneratedKeys();
			if(resultSet.next()) id = resultSet.getLong(1);
			
			connection.commit();
			return id;
			
		} catch (SQLException e) {
			if(connection != null) {
				try {
					connection.rollback();
				} catch (SQLException e1) {
					System.out.println(e1.getMessage());
				}	
			}
		} finally {
	
			try {
				
				if(resultSet != null) resultSet.close();
				if(statement != null) statement.close();
				if(connection != null) connection.close();
				
			} catch (SQLException e) {
				return id;
			}
		}
		return id;
		
	}
	
	
	private void setStatement(PreparedStatement statement, Object... parameters) {
		
		try {
			
			int index = 1;
			for(Object o : parameters) {
				
				if(o instanceof Long) statement.setLong(index, (Long) o);
				else if(o instanceof String) statement.setString(index, (String) o);
				else if(o instanceof Integer) statement.setInt(index, (Integer) o);
				else if(o instanceof Timestamp) statement.setTimestamp(index, (Timestamp) o);
				else if(o == null) statement.setNull(index, Types.NULL);
				
				index++;
			}
			
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} 
		
	}

	@Override
	public int count(String sql, Object... parameters) {
		
		Connection connection = getConnection();
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		int count = 0;
		
		if(connection != null) {
			
			try {
				
				statement = connection.prepareStatement(sql);
				setStatement(statement, parameters);
				resultSet = statement.executeQuery();
				
				while(resultSet.next()) {
					count = resultSet.getInt(1);
				}

				return count;
				
			} catch (SQLException e) {
				return 0;
				
			} finally {
				
				try {
					
					if(resultSet != null) resultSet.close();
					if(statement != null) statement.close();
					if(connection != null) connection.close();
					
				} catch (SQLException e) {
					return count;
				}
				
			}
			
		}
		
		return count;
	}
	
	
	
	
	
	
	
}
